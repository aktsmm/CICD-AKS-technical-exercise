name: Setup HTTPS with Self-Signed Certificate

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain name (leave empty to use nip.io with Ingress IP)'
        required: false
        type: string

env:
  RESOURCE_GROUP: rg-bbs-cicd-aks
  AKS_CLUSTER: aks-dev

jobs:
  setup-https:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER }} \
            --overwrite-existing

      - name: Get Ingress IP
        id: ingress-ip
        run: |
          echo "Waiting for Ingress Controller to get External IP..."
          for i in {1..30}; do
            INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ -n "$INGRESS_IP" ]; then
              echo "ip=$INGRESS_IP" >> $GITHUB_OUTPUT
              echo "‚úÖ Ingress IP: $INGRESS_IP"
              break
            fi
            echo "‚è≥ Waiting... ($i/30)"
            sleep 10
          done
          
          if [ -z "$INGRESS_IP" ]; then
            echo "‚ùå Failed to get Ingress IP"
            exit 1
          fi

      - name: Set Domain Name
        id: domain
        run: |
          if [ -n "${{ inputs.domain }}" ]; then
            DOMAIN="${{ inputs.domain }}"
          else
            # Use nip.io for automatic DNS resolution
            DOMAIN="${{ steps.ingress-ip.outputs.ip }}.nip.io"
          fi
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
          echo "‚úÖ Using domain: $DOMAIN"

      - name: Install cert-manager
        run: |
          echo "üì¶ Installing cert-manager..."
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.2/cert-manager.yaml
          
          echo "‚è≥ Waiting for cert-manager to be ready..."
          kubectl wait --for=condition=Available --timeout=300s \
            deployment/cert-manager -n cert-manager
          kubectl wait --for=condition=Available --timeout=300s \
            deployment/cert-manager-webhook -n cert-manager
          kubectl wait --for=condition=Available --timeout=300s \
            deployment/cert-manager-cainjector -n cert-manager
          
          echo "‚úÖ cert-manager is ready"

      - name: Create Self-Signed ClusterIssuer
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: selfsigned-issuer
          spec:
            selfSigned: {}
          EOF
          
          echo "‚úÖ Self-Signed ClusterIssuer created"

      - name: Update Ingress with TLS
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: guestbook-ingress
            namespace: default
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
              cert-manager.io/cluster-issuer: selfsigned-issuer
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          spec:
            ingressClassName: nginx
            tls:
            - hosts:
              - ${{ steps.domain.outputs.domain }}
              secretName: guestbook-tls
            rules:
            - host: ${{ steps.domain.outputs.domain }}
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: guestbook-service
                      port:
                        number: 80
          EOF
          
          echo "‚úÖ Ingress updated with TLS configuration"

      - name: Wait for Certificate
        run: |
          echo "‚è≥ Waiting for certificate to be ready..."
          for i in {1..60}; do
            CERT_READY=$(kubectl get certificate guestbook-tls -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "")
            if [ "$CERT_READY" == "True" ]; then
              echo "‚úÖ Certificate is ready"
              kubectl get certificate guestbook-tls
              break
            fi
            echo "‚è≥ Waiting for certificate... ($i/60)"
            sleep 5
          done

      - name: Display Access Information
        run: |
          echo ""
          echo "=================================================="
          echo "üéâ HTTPS Setup Complete!"
          echo "=================================================="
          echo ""
          echo "üåê Access URLs:"
          echo "  HTTPS: https://${{ steps.domain.outputs.domain }}"
          echo "  HTTP:  http://${{ steps.domain.outputs.domain }}"
          echo ""
          echo "üìã Ingress IP: ${{ steps.ingress-ip.outputs.ip }}"
          echo "üîê Certificate Type: Self-Signed"
          echo ""
          echo "‚ö†Ô∏è  Note: Self-signed certificate will show a browser warning."
          echo "    This is expected for demo environments."
          echo ""
          echo "üîç Verification Commands:"
          echo "  kubectl get ingress guestbook-ingress"
          echo "  kubectl get certificate guestbook-tls"
          echo "  kubectl describe certificate guestbook-tls"
          echo ""

      - name: Update wizexercise.txt with HTTPS URL
        run: |
          HTTPS_URL="https://${{ steps.domain.outputs.domain }}"
          
          cat > app/wizexercise.txt <<EOF
          Ê∞èÂêç: yamapan
          Êó•‰ªò: 2025-10-31
          CICD-AKS-Technical Exercise

          ===================================
          „Åì„ÅÆ„Éï„Ç°„Ç§„É´„Å∏„ÅÆ„Ç¢„ÇØ„Çª„ÇπÊñπÊ≥ï:
          ===================================

          „ÄêÊñπÊ≥ï1„Äëkubectl exec „Ç≥„Éû„É≥„ÉâÔºà„Ç≥„É≥„ÉÜ„ÉäÂÜÖÈÉ®Á¢∫Ë™çÔºâ
          \$ kubectl exec -it \$(kubectl get pod -l app=guestbook -o jsonpath='{.items[0].metadata.name}') -- cat /app/wizexercise.txt

          „ÄêÊñπÊ≥ï2„Äë„Éñ„É©„Ç¶„Ç∂„Åã„ÇâÁõ¥Êé•„Ç¢„ÇØ„Çª„Çπ (HTTPS)
          URL: ${HTTPS_URL}/wizexercise.txt

          „ÄêÊñπÊ≥ï3„Äëcurl „Ç≥„Éû„É≥„Éâ (HTTPS)
          \$ curl -k ${HTTPS_URL}/wizexercise.txt

          „ÄêÊñπÊ≥ï4„ÄëHTML„Éó„É¨„Éì„É•„ÉºÁâà (HTTPS)
          URL: ${HTTPS_URL}/wizfile

          ---
          Note: HTTPS„ÅØËá™Â∑±ÁΩ≤ÂêçË®ºÊòéÊõ∏„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
          „Éñ„É©„Ç¶„Ç∂„ÅßË≠¶Âëä„ÅåË°®Á§∫„Åï„Çå„ÇãÂ†¥Âêà„ÅØ„ÄåË©≥Á¥∞Ë®≠ÂÆö„Äç‚Üí„ÄåÁ∂öË°å„Äç„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          
          ÂèñÂæóÊñπÊ≥ï (Ingress IP):
          \$ kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
          
          Domain: ${{ steps.domain.outputs.domain }}
          EOF

      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git add app/wizexercise.txt
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: Update wizexercise.txt with HTTPS URL

          - Add HTTPS access methods
          - Update domain to ${{ steps.domain.outputs.domain }}
          - Note about self-signed certificate
          "
            git push
            echo "‚úÖ Changes committed and pushed"
          fi

      - name: Summary
        run: |
          echo "## üéâ HTTPS Setup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Domain** | \`${{ steps.domain.outputs.domain }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Ingress IP** | \`${{ steps.ingress-ip.outputs.ip }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Certificate Type** | Self-Signed |" >> $GITHUB_STEP_SUMMARY
          echo "| **HTTPS URL** | https://${{ steps.domain.outputs.domain }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Installed Components" >> $GITHUB_STEP_SUMMARY
          echo "- cert-manager v1.13.2" >> $GITHUB_STEP_SUMMARY
          echo "- Self-Signed ClusterIssuer" >> $GITHUB_STEP_SUMMARY
          echo "- TLS Certificate (guestbook-tls)" >> $GITHUB_STEP_SUMMARY
          echo "- Updated Ingress with TLS configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Verification" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Check certificate status" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get certificate guestbook-tls" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Check ingress" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get ingress guestbook-ingress" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Test HTTPS access" >> $GITHUB_STEP_SUMMARY
          echo "curl -k https://${{ steps.domain.outputs.domain }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Note**: Self-signed certificates will trigger browser warnings. This is expected for demo environments." >> $GITHUB_STEP_SUMMARY
