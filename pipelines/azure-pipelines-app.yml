name: Build and Deploy Application

on:
  push:
    branches:
      - main
    paths:
      - "app/**"
  workflow_dispatch:

env:
  ACR_NAME: acrwizdev
  IMAGE_NAME: guestbook
  RESOURCE_GROUP: rg-cicd-aks-bbs-001

jobs:
  scan-container:
    name: Scan Container Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Docker Image (for scanning)
        run: |
          cd app
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif

  build-push:
    name: Build and Push to ACR
    runs-on: ubuntu-latest
    needs: scan-container
    outputs:
      image_tag: ${{ steps.image.outputs.tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Build and Push Image
        id: image
        run: |
          cd app
          IMAGE_TAG="${{ github.sha }}"
          FULL_IMAGE="${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"

          docker build -t $FULL_IMAGE .
          docker push $FULL_IMAGE

          # Tag as latest
          docker tag $FULL_IMAGE ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

  deploy-aks:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Infra Outputs
        uses: actions/download-artifact@v3
        with:
          name: infra-outputs
          path: outputs/

      - name: Set AKS Context
        run: |
          source outputs/infra-outputs.txt
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name $AKS_CLUSTER_NAME \
            --overwrite-existing

      - name: Replace Placeholders in K8s Manifests
        run: |
          source outputs/infra-outputs.txt

          # Deployment - use dynamic image tag
          sed -i "s|image: acrwizdev.azurecr.io/guestbook:.*|image: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.build-push.outputs.image_tag }}|g" app/k8s/deployment.yaml
          sed -i "s|<MONGO_VM_IP>|$MONGO_VM_IP|g" app/k8s/deployment.yaml

          cat app/k8s/deployment.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f app/k8s/deployment.yaml
          kubectl apply -f app/k8s/service.yaml
          # Note: Ingress is skipped as we're using LoadBalancer service type

          # 脆弱なRBAC設定も適用(デモ用)
          kubectl apply -f app/k8s/rbac-vulnerable.yaml

      - name: Wait for Deployment
        run: |
          kubectl rollout status deployment/guestbook-app --timeout=5m

      - name: Get Service Information
        run: |
          kubectl get pods
          kubectl get svc
